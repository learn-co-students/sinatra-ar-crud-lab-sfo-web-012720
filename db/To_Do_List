Database

    First, you'll need to create the articles table. CHECK
        An article should have a title and content. CHECK

    Next, set up the corresponding Article model.  CHECK
        Make sure the class inherits from ActiveRecord::Base. CHECK


Create

    Now that we have the database and model set up, it's time to set up the ability to create an article.
        First, create a route in your controller, get '/articles/new', that renders the new.erb view. CHECK

        We need to create an ERB file in the views directory, 
        new.erb, with a form that POSTs to a controller action, /articles.  CHECK

        The controller action should use the Create CRUD action to create the article and save it to the database. CHECK

        When the form on new.erb is submitted, the action, pointing to /articles, 
        will redirect to another action which will trigger a render of a show.erb file automatically. CHECK



Read 

The show action should render the ERB view show.erb, which shows an individual article. CHECK

The index action should render the ERB view index.erb, which shows a list of all of the articles. CHECK

Create the get '/articles' controller action. This action should use Active Record to grab all of the articles 
and store them in an instance variable, @articles. Then, it should render the index.erb view.

That view should use ERB to iterate over @articles and render them on the page. CHECK


 Create the get '/articles/:id' controller action.  CHECK
    This action should use Active Record 
    to grab the article with the id that is in the params and set it equal to @article.   CHECK
 

 Then, it should render the show.erb view page. CHECK

Update

 The Update CRUD action corresponds to the edit controller action and view.
 Create a controller action, get '/articles/:id/edit', that renders the view, edit.erb CHECK

  This view should contain a form to update a specific article and POSTs to a controller action, patch '/articles/:id'. CHECK 

  Reminder: Remember to add the use Rack::MethodOverride to your config.ru file so that your app will know how to handle PATCH, PUT, and DELETE requests! CHECK


Delete CHECK


